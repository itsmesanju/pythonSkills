!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
Archer	dunder.py	/^class Archer(User):$/;"	c
Archer	introspection.py	/^class Archer(User):$/;"	c
Archer	oop.py	/^class Archer(User):$/;"	c
Archer	super.py	/^class Archer(User):$/;"	c
Array	leetCode/Arrays/Implementing an array.py	/^class Array:$/;"	c
BFS	leetCode/Algorithms/Traversals/BFS.py	/^    def BFS(self):$/;"	m	class:BST
BST	leetCode/Algorithms/Traversals/BFS.py	/^class BST():$/;"	c
BST	leetCode/Algorithms/Traversals/DFS.py	/^class BST():$/;"	c
BST	leetCode/DS/Trees/Binary_Search_Tree.py	/^class BST():$/;"	c
BinarySearchTree	leetCode/Traversals/Breadth First Search.py	/^class BinarySearchTree:$/;"	c
BinarySearchTree	leetCode/Traversals/Depth First Search.py	/^class BinarySearchTree:$/;"	c
BinarySearchTree	leetCode/Trees/Binary Search Tree.py	/^class BinarySearchTree:$/;"	c
CircularLinkedList	leetCode/Linkedlist/Circular Linked List.py	/^class CircularLinkedList:$/;"	c
DFS_Inorder	leetCode/Algorithms/Traversals/DFS.py	/^    def DFS_Inorder(self):$/;"	m	class:BST
DFS_Postorder	leetCode/Algorithms/Traversals/DFS.py	/^    def DFS_Postorder(self):$/;"	m	class:BST
DFS_Preorder	leetCode/Algorithms/Traversals/DFS.py	/^    def DFS_Preorder(self):$/;"	m	class:BST
DoublyLinkedList	leetCode/DS/Linked Lists/Doubly_Linked_Lists.py	/^class DoublyLinkedList():$/;"	c
DoublyLinkedList	leetCode/Linkedlist/Doubly Linked List.py	/^class DoublyLinkedList:$/;"	c
Graph	leetCode/DS/Graphs/Undirected_Graph_Implementation.py	/^class Graph():$/;"	c
Graph	leetCode/Graph/Graph Implementation.py	/^class Graph:$/;"	c
Hashtable	leetCode/Hashtables/Hash Table Implementation.py	/^class Hashtable:$/;"	c
LinkedList	leetCode/DS/Linked Lists/Implementation.py	/^class LinkedList():$/;"	c
LinkedList	leetCode/Linkedlist/Linked List.py	/^class LinkedList():$/;"	c
MaxHeap	leetCode/DS/Trees/Heap.py	/^class MaxHeap:$/;"	c
N	leetCode/FB_Leftmost_column_with_atleast_one_in_row.py	/^N = 3$/;"	v
Node	leetCode/Algorithms/Traversals/BFS.py	/^class Node():$/;"	c
Node	leetCode/Algorithms/Traversals/DFS.py	/^class Node():$/;"	c
Node	leetCode/DS/Linked Lists/Doubly_Linked_Lists.py	/^class Node():$/;"	c
Node	leetCode/DS/Linked Lists/Implementation.py	/^class Node():$/;"	c
Node	leetCode/DS/Queues/Linked_List_Implementation.py	/^class Node():$/;"	c
Node	leetCode/DS/Stacks/Linked_List_Implementation.py	/^class Node():$/;"	c
Node	leetCode/DS/Trees/Binary_Search_Tree.py	/^class Node():$/;"	c
Node	leetCode/Linkedlist/Doubly Linked List.py	/^class Node:$/;"	c
Node	leetCode/Linkedlist/Linked List.py	/^class Node():$/;"	c
Node	leetCode/StackAndQueue/Queue using Linked List.py	/^class Node:$/;"	c
Node	leetCode/StackAndQueue/Stacks using Linked List.py	/^class Node:$/;"	c
Node	leetCode/Traversals/Breadth First Search.py	/^class Node:$/;"	c
Node	leetCode/Traversals/Depth First Search.py	/^class Node:$/;"	c
Node	leetCode/Trees/Binary Search Tree.py	/^class Node:$/;"	c
Pair	leetCode/FB_Merge_overlapping_intervals.py	/^class Pair:$/;"	c
Queue	leetCode/DS/Queues/Linked_List_Implementation.py	/^class Queue():$/;"	c
Queue	leetCode/DS/Queues/Queue_Using_Stacks.py	/^class Queue():$/;"	c
Queue	leetCode/StackAndQueue/Queue using Linked List.py	/^class Queue:$/;"	c
Recursive_BFS	leetCode/Algorithms/Traversals/BFS.py	/^    def Recursive_BFS(self, queue, BFS_list):$/;"	m	class:BST
Solution	leetCode/100.Minimum_parentheses_to_add.py	/^    def minAddToMakeValid(self, S):$/;"	c
Solution	leetCode/100.Minimum_parentheses_to_add.py	/^class Solution:$/;"	c
Solution	leetCode/101_symmetric_tree_with_null_handling.py	/^class Solution:$/;"	c
Solution	leetCode/101_symmetric_tree_without_null_handling.py	/^class Solution:$/;"	c
Solution	leetCode/11.container_with_most_water.py	/^class Solution:$/;"	c
Solution	leetCode/11.container_with_most_water_Optimized.py	/^class Solution:$/;"	c
Solution	leetCode/12.Integer_to_Roman.py	/^class Solution:$/;"	c
Solution	leetCode/121.Best_time_to_buy_sell_stocks.py	/^class Solution(object):$/;"	c
Solution	leetCode/125.valid_Palindrome.py	/^class Solution:$/;"	c
Solution	leetCode/125.valid_Palindrome_optimized_with_re.py	/^class Solution:$/;"	c
Solution	leetCode/125.valid_Palindrome_two_pointer.py	/^class Solution(object):$/;"	c
Solution	leetCode/136.Single_number_missing.py	/^class Solution:$/;"	c
Solution	leetCode/139.Word_break.py	/^class Solution(object):$/;"	c
Solution	leetCode/2.Add_reversed_two_numbers_in_linkedList.py	/^class Solution:$/;"	c
Solution	leetCode/20.valid_parantheses.py	/^class Solution(object):$/;"	c
Solution	leetCode/20.valid_parantheses_stack.py	/^class Solution:$/;"	c
Solution	leetCode/200.Number_of_islands.py	/^class Solution(object):$/;"	c
Solution	leetCode/206.Reverse_linked_list.iterative.py	/^class Solution:$/;"	c
Solution	leetCode/206.Reverse_linked_list.recursive.py	/^class Solution:        $/;"	c
Solution	leetCode/217.Contains_duplicate_in_array.py	/^class Solution:$/;"	c
Solution	leetCode/238.Product_of_array_except_itself.py	/^class Solution:$/;"	c
Solution	leetCode/268.Missing_number.py	/^class Solution:$/;"	c
Solution	leetCode/273.Integers_to_english_words_translation.py	/^class Solution:$/;"	c
Solution	leetCode/3.longest_subString_without_repeating_character_BruteForce.py	/^class Solution:$/;"	c
Solution	leetCode/387.First_Unique_Character_in_String.py	/^class Solution(object):$/;"	c
Solution	leetCode/387.First_Unique_Character_in_String.py	/^class Solution:$/;"	c
Solution	leetCode/42.Trapping_rain_water.py	/^class Solution:$/;"	c
Solution	leetCode/42.Trapping_rain_water_BruteForce.py	/^class Solution:$/;"	c
Solution	leetCode/56.Merge_intervals_for_loop.py	/^class Solution:$/;"	c
Solution	leetCode/560.subarray_sum_equals_K.py	/^class Solution:$/;"	c
Solution	leetCode/7.reverseInteger.py	/^class Solution:$/;"	c
Solution	leetCode/70.Climbing_Stairs.py	/^class Solution:$/;"	c
Solution	leetCode/788.rotated_digits_using_hash_map.py	/^class Solution:$/;"	c
Solution	leetCode/788.rotated_digits_using_simple.py	/^class Solution:$/;"	c
Solution	leetCode/844.Typed_out_string_match_BackspaceStringComapre_.py	/^class Solution:$/;"	c
Solution	leetCode/House_robber_using_DP.py	/^class Solution:$/;"	c
Solution	leetCode/House_robber_using_odd-even.py	/^class Solution:$/;"	c
Solution	leetCode/find_elements_from_array_equals_to_sum.py	/^class Solution:$/;"	c
Solution	leetCode/validate_one_type_of_paranthesis.py	/^class Solution:$/;"	c
Stack	leetCode/DS/Stacks/Array_Implementation.py	/^class Stack():$/;"	c
Stack	leetCode/DS/Stacks/Linked_List_Implementation.py	/^class Stack():$/;"	c
Stack	leetCode/StackAndQueue/Stacks using Arrays.py	/^class Stack:$/;"	c
Stack	leetCode/StackAndQueue/Stacks using Linked List.py	/^class Stack:$/;"	c
SuperList	ex_extending_list.py	/^class SuperList(list):$/;"	c
Trie	leetCode/DS/Trees/Trie.py	/^class Trie():$/;"	c
TrieNode	leetCode/DS/Trees/Trie.py	/^class TrieNode():$/;"	c
User	dunder.py	/^class User(object):$/;"	c
User	introspection.py	/^class User(object):$/;"	c
User	oop.py	/^class User(object):$/;"	c
User	super.py	/^class User(object):$/;"	c
Wizard	dunder.py	/^class Wizard(User):$/;"	c
Wizard	introspection.py	/^class Wizard(User):$/;"	c
Wizard	oop.py	/^class Wizard(User):$/;"	c
Wizard	super.py	/^class Wizard(User):$/;"	c
_Node	leetCode/Linkedlist/Circular Linked List.py	/^    class _Node:$/;"	c	class:CircularLinkedList
__init__	dunder.py	/^    def __init__(self, email):$/;"	m	class:User
__init__	dunder.py	/^    def __init__(self, name, num_arrows):$/;"	m	class:Archer
__init__	dunder.py	/^    def __init__(self, name, power,email):$/;"	m	class:Wizard
__init__	introspection.py	/^    def __init__(self, email):$/;"	m	class:User
__init__	introspection.py	/^    def __init__(self, name, num_arrows):$/;"	m	class:Archer
__init__	introspection.py	/^    def __init__(self, name, power,email):$/;"	m	class:Wizard
__init__	leetCode/139.Word_break.py	/^    def __init__(self):$/;"	m	class:Solution
__init__	leetCode/Algorithms/Traversals/BFS.py	/^    def __init__(self):$/;"	m	class:BST
__init__	leetCode/Algorithms/Traversals/BFS.py	/^    def __init__(self, data):$/;"	m	class:Node
__init__	leetCode/Algorithms/Traversals/DFS.py	/^    def __init__(self):$/;"	m	class:BST
__init__	leetCode/Algorithms/Traversals/DFS.py	/^    def __init__(self, data):$/;"	m	class:Node
__init__	leetCode/Arrays/Implementing an array.py	/^  def __init__(self):$/;"	m	class:Array
__init__	leetCode/DS/Arrays/Implementation.py	/^    def __init__(self):$/;"	m	class:my_array
__init__	leetCode/DS/Graphs/Undirected_Graph_Implementation.py	/^    def __init__(self):$/;"	m	class:Graph
__init__	leetCode/DS/Hash Tables/Implementation.py	/^    def __init__(self,size): #We initialize the size of our hash table(no. of buckets) with the size given to the class object$/;"	m	class:hash_table
__init__	leetCode/DS/Linked Lists/Doubly_Linked_Lists.py	/^    def __init__(self):$/;"	m	class:DoublyLinkedList
__init__	leetCode/DS/Linked Lists/Doubly_Linked_Lists.py	/^    def __init__(self, data):$/;"	m	class:Node
__init__	leetCode/DS/Linked Lists/Implementation.py	/^    def __init__(self):$/;"	m	class:LinkedList
__init__	leetCode/DS/Linked Lists/Implementation.py	/^    def __init__(self, data): #When instantiating a Node, we will pass the data we want the node to hold$/;"	m	class:Node
__init__	leetCode/DS/Queues/Linked_List_Implementation.py	/^    def __init__(self):$/;"	m	class:Queue
__init__	leetCode/DS/Queues/Linked_List_Implementation.py	/^    def __init__(self, data):$/;"	m	class:Node
__init__	leetCode/DS/Queues/Queue_Using_Stacks.py	/^    def __init__(self):$/;"	m	class:Queue
__init__	leetCode/DS/Stacks/Array_Implementation.py	/^    def __init__(self):$/;"	m	class:Stack
__init__	leetCode/DS/Stacks/Linked_List_Implementation.py	/^    def __init__(self):$/;"	m	class:Stack
__init__	leetCode/DS/Stacks/Linked_List_Implementation.py	/^    def __init__(self, data):$/;"	m	class:Node
__init__	leetCode/DS/Trees/Binary_Search_Tree.py	/^    def __init__(self):$/;"	m	class:BST
__init__	leetCode/DS/Trees/Binary_Search_Tree.py	/^    def __init__(self, data):$/;"	m	class:Node
__init__	leetCode/DS/Trees/Heap.py	/^    def __init__(self, maxsize):$/;"	m	class:MaxHeap
__init__	leetCode/DS/Trees/Trie.py	/^    def __init__(self):$/;"	m	class:Trie
__init__	leetCode/DS/Trees/Trie.py	/^    def __init__(self):$/;"	m	class:TrieNode
__init__	leetCode/FB_Merge_overlapping_intervals.py	/^  def __init__(self, first, second):$/;"	m	class:Pair
__init__	leetCode/Graph/Graph Implementation.py	/^  def __init__(self):$/;"	m	class:Graph
__init__	leetCode/Hashtables/Hash Table Implementation.py	/^	def __init__(self):$/;"	m	class:Hashtable
__init__	leetCode/Linkedlist/Circular Linked List.py	/^        def __init__(self, value, next):$/;"	m	class:CircularLinkedList._Node
__init__	leetCode/Linkedlist/Circular Linked List.py	/^    def __init__(self):$/;"	m	class:CircularLinkedList
__init__	leetCode/Linkedlist/Doubly Linked List.py	/^    def __init__(self):$/;"	m	class:DoublyLinkedList
__init__	leetCode/Linkedlist/Doubly Linked List.py	/^    def __init__(self,data):$/;"	m	class:Node
__init__	leetCode/Linkedlist/Linked List.py	/^  def __init__(self):$/;"	m	class:LinkedList
__init__	leetCode/Linkedlist/Linked List.py	/^  def __init__(self,data):$/;"	m	class:Node
__init__	leetCode/StackAndQueue/Queue using Linked List.py	/^  def __init__(self):$/;"	m	class:Queue
__init__	leetCode/StackAndQueue/Queue using Linked List.py	/^  def __init__(self,val):$/;"	m	class:Node
__init__	leetCode/StackAndQueue/Stacks using Arrays.py	/^  def __init__(self):$/;"	m	class:Stack
__init__	leetCode/StackAndQueue/Stacks using Linked List.py	/^  def __init__(self):$/;"	m	class:Stack
__init__	leetCode/StackAndQueue/Stacks using Linked List.py	/^  def __init__(self,data):$/;"	m	class:Node
__init__	leetCode/Traversals/Breadth First Search.py	/^  def __init__(self):$/;"	m	class:BinarySearchTree
__init__	leetCode/Traversals/Breadth First Search.py	/^  def __init__(self,val):$/;"	m	class:Node
__init__	leetCode/Traversals/Depth First Search.py	/^  def __init__(self):$/;"	m	class:BinarySearchTree
__init__	leetCode/Traversals/Depth First Search.py	/^  def __init__(self,val):$/;"	m	class:Node
__init__	leetCode/Trees/Binary Search Tree.py	/^  def __init__(self):$/;"	m	class:BinarySearchTree
__init__	leetCode/Trees/Binary Search Tree.py	/^  def __init__(self,data):$/;"	m	class:Node
__init__	oop.py	/^    def __init__(self, name, num_arrows):$/;"	m	class:Archer
__init__	oop.py	/^    def __init__(self, name, power):$/;"	m	class:Wizard
__init__	super.py	/^    def __init__(self, email):$/;"	m	class:User
__init__	super.py	/^    def __init__(self, name, num_arrows):$/;"	m	class:Archer
__init__	super.py	/^    def __init__(self, name, power,email):$/;"	m	class:Wizard
__len__	ex_extending_list.py	/^    def __len__(self):$/;"	m	class:SuperList	file:
__slots__	leetCode/Linkedlist/Circular Linked List.py	/^        __slots__ = '_data', '_next'$/;"	v	class:CircularLinkedList._Node
__str__	leetCode/Arrays/Implementing an array.py	/^  def __str__(self):$/;"	m	class:Array	file:
__str__	leetCode/DS/Arrays/Implementation.py	/^    def __str__(self):$/;"	m	class:my_array	file:
__str__	leetCode/DS/Hash Tables/Implementation.py	/^    def __str__(self): #As in the array implementation, this method is used to print the attributes of the class object in a dictionary format$/;"	m	class:hash_table	file:
__str__	leetCode/Graph/Graph Implementation.py	/^  def __str__(self):$/;"	m	class:Graph	file:
__str__	leetCode/Hashtables/Hash Table Implementation.py	/^	def __str__(self):$/;"	m	class:Hashtable	file:
__str__	leetCode/StackAndQueue/Stacks using Arrays.py	/^  def __str__(self):$/;"	m	class:Stack	file:
_character_index	leetCode/DS/Trees/Trie.py	/^    def _character_index(self, char):$/;"	m	class:Trie
_hash	leetCode/DS/Hash Tables/Implementation.py	/^    def _hash(self, key): #Our custom hash function$/;"	m	class:hash_table
a	leetCode/Arrays/Merge Sorted Arrays.py	/^a=[1,3,4,6,20]$/;"	v
a	leetCode/DS/Arrays/Rotate_Array.py	/^a = [1,2,3,4,5,6,7,8,9]$/;"	v
add80	leetCode/DynamicProgramming/Memoization.py	/^def add80(n):$/;"	f
addEdge	leetCode/Graph/Graph Implementation.py	/^  def addEdge(self,node1,node2):$/;"	m	class:Graph
addTwoNumbers	leetCode/2.Add_reversed_two_numbers_in_linkedList.py	/^    def addTwoNumbers(self, l1: ListNode, l2: ListNode) -> ListNode:$/;"	m	class:Solution
addVertex	leetCode/Graph/Graph Implementation.py	/^  def addVertex(self,node):$/;"	m	class:Graph
add_first	leetCode/Linkedlist/Circular Linked List.py	/^    def add_first(self, value):$/;"	m	class:CircularLinkedList
add_last	leetCode/Linkedlist/Circular Linked List.py	/^    def add_last(self, value):$/;"	m	class:CircularLinkedList
add_particular	leetCode/Linkedlist/Circular Linked List.py	/^    def add_particular(self, value, position):$/;"	m	class:CircularLinkedList
age	errorHandling.py	/^     age = int(input('whats your age? '))$/;"	v
append	leetCode/DS/Linked Lists/Doubly_Linked_Lists.py	/^    def append(self, data):$/;"	m	class:DoublyLinkedList
append	leetCode/DS/Linked Lists/Implementation.py	/^    def append(self, data):$/;"	m	class:LinkedList
append	leetCode/Linkedlist/Doubly Linked List.py	/^    def append(self,data):$/;"	m	class:DoublyLinkedList
append	leetCode/Linkedlist/Linked List.py	/^  def append(self,data):$/;"	m	class:LinkedList
archer1	dunder.py	/^archer1=Archer('Sanju',30)$/;"	v
archer1	introspection.py	/^archer1=Archer('Sanju',30)$/;"	v
archer1	oop.py	/^archer1=Archer('Sanju',30)$/;"	v
archer1	super.py	/^archer1=Archer('Sanju',30)$/;"	v
arr	leetCode/Arrays/Implementing an array.py	/^arr=Array()$/;"	v
arr	leetCode/DS/Arrays/Implementation.py	/^arr = my_array()$/;"	v
arr	leetCode/Sorting/Bubble sort.py	/^arr = [5,9,1,2,7,3,8,2]$/;"	v
arr	leetCode/Sorting/Insertion sort.py	/^arr = [6,5,3,1,8,7,2,4]$/;"	v
arr	leetCode/Sorting/Merge sort.py	/^arr = [99,44,6,2,1,5,63,87,283,4,0]$/;"	v
arr	leetCode/Sorting/Selection sort.py	/^arr = [8,6,5,0,4,3,2]$/;"	v
array	leetCode/Algorithms/Dynamic Programming/Memoization.py	/^array = [random.randint(1,10) for _ in range(10000000)] #Generates an array of size 1000000 with random integers between 1-10(both included)$/;"	v
array	leetCode/Algorithms/Sorting/Bubble_Sort.py	/^array = [5,9,3,10,45,2,0]$/;"	v
array	leetCode/Algorithms/Sorting/Heap_Sort.py	/^array = [5,9,3,10,45,2,0]$/;"	v
array	leetCode/Algorithms/Sorting/Insertion_Sort.py	/^array = [5,9,3,10,45,2,0]$/;"	v
array	leetCode/Algorithms/Sorting/Merge_Sort.py	/^array = [5,9,3,10,45,2,0]$/;"	v
array	leetCode/Algorithms/Sorting/Quick_Sort.py	/^array = [5,9,3,10,45,2,0]$/;"	v
array	leetCode/Algorithms/Sorting/Selection_Sort.py	/^array = [5,9,3,10,45,2,0]$/;"	v
array	leetCode/Big-O/O(n^2).py	/^array = ['a','b','c','d','e']$/;"	v
array	leetCode/DS/Arrays/Contains_Duplicate.py	/^array = [1,2,46,32,98,61,34,46]$/;"	v
array	leetCode/DS/Arrays/Introduction.py	/^array = [5,8,2,9,17,43,25,10]$/;"	v
array	leetCode/DS/Arrays/Maximum_SubArray.py	/^array = [-2,1,-3,4,-1,2,1,-5,4]$/;"	v
array	leetCode/DS/Arrays/Move_Zeroes.py	/^array = [0,0,0,0,1,0,3,0,0,0,12,9,7]$/;"	v
array	leetCode/DS/Arrays/Rotate_Array.py	/^array = [1,2,3,4,5,6,7,8,9]$/;"	v
array	leetCode/DS/Hash Tables/First_Recurring_Character.py	/^array = [2,1,4,1,5,2,6]$/;"	v
array	leetCode/FB_Find_maximum_single_sell_profit.py	/^array = [1, 2, 6, 4, 3, 2, 1, 2, 5]  $/;"	v
array	leetCode/FB_Find_maximum_single_sell_profit.py	/^array = [10, 6,5, 3, 2, 1]$/;"	v
array	leetCode/GoogleInterviewQuestion.py	/^array = [1,2,4,5]$/;"	v
array1	leetCode/Algorithms/Sorting/Bubble_Sort.py	/^array1 = [5,9,3,10,45,2,0]$/;"	v
array1	leetCode/Big-O/O(m x n).py	/^array1 = ['a','b','c','d','e']$/;"	v
array1	leetCode/DS/Arrays/Merging_sorted_arrays.py	/^array1 = [1,3,5,7]$/;"	v
array1	leetCode/Find_matching_elements_in_array.py	/^array1 = ['a','b','c','x']$/;"	v
array2	leetCode/Big-O/O(m x n).py	/^array2 = [1,2,3,4,5]$/;"	v
array2	leetCode/DS/Arrays/Merging_sorted_arrays.py	/^array2 = [2,4,6,8,10,12]$/;"	v
array2	leetCode/Find_matching_elements_in_array.py	/^array2 = ['x','y','z']$/;"	v
array_in	leetCode/array_find_matching.py	/^array_in=[1,2,3,5,61,9,10,22]$/;"	v
array_large	leetCode/Big-O/O(1).py	/^array_large = ['nemo' for i in range(100000)]$/;"	v
array_medium	leetCode/Big-O/O(1).py	/^array_medium = ['nemo' for i in range(100)]$/;"	v
array_small	leetCode/Big-O/O(1).py	/^array_small = ['nemo' for i in range(10)]$/;"	v
attack	dunder.py	/^    def attack(self):$/;"	m	class:Archer
attack	dunder.py	/^    def attack(self):$/;"	m	class:Wizard
attack	introspection.py	/^    def attack(self):$/;"	m	class:Archer
attack	introspection.py	/^    def attack(self):$/;"	m	class:Wizard
attack	oop.py	/^    def attack(self):$/;"	m	class:Archer
attack	oop.py	/^    def attack(self):$/;"	m	class:Wizard
attack	super.py	/^    def attack(self):$/;"	m	class:Archer
attack	super.py	/^    def attack(self):$/;"	m	class:Wizard
b	leetCode/Arrays/Merge Sorted Arrays.py	/^b=[2,3,4,5,6,9,11,76]$/;"	v
backspaceCompare	leetCode/844.Typed_out_string_match_BackspaceStringComapre_.py	/^    def backspaceCompare(self, S: str, T: str) -> bool:$/;"	m	class:Solution
better_duplicate_search	leetCode/DS/Arrays/Contains_Duplicate.py	/^def better_duplicate_search(array):$/;"	f
binary_search	leetCode/FB_search_rotated_array.py	/^def binary_search(arr, start, end, key):$/;"	f
binary_search	leetCode/GoogleInterviewQuestion.py	/^def binary_search(array,left,right, ele):$/;"	f
binary_search_rotated	leetCode/FB_search_rotated_array.py	/^def binary_search_rotated(arr, key):$/;"	f
breadthfirstsearch	leetCode/Traversals/Breadth First Search.py	/^  def breadthfirstsearch(self):$/;"	m	class:BinarySearchTree
brute_force_duplicate_search	leetCode/DS/Arrays/Contains_Duplicate.py	/^def brute_force_duplicate_search(array):$/;"	f
brute_force_matching_element	leetCode/Find_matching_elements_in_array.py	/^def brute_force_matching_element(array1, array2):$/;"	f
brute_force_max_subarray	leetCode/DS/Arrays/Maximum_SubArray.py	/^def brute_force_max_subarray(array):$/;"	f
brute_force_pair_sum	leetCode/GoogleInterviewQuestion.py	/^def brute_force_pair_sum(array, sum):$/;"	f
brute_force_rotation	leetCode/DS/Arrays/Rotate_Array.py	/^def brute_force_rotation(array, k):$/;"	f
bst	leetCode/Trees/Binary Search Tree.py	/^bst = BinarySearchTree()$/;"	v
bubble_sort	leetCode/Algorithms/Sorting/Bubble_Sort.py	/^def bubble_sort(array):$/;"	f
bubblesort	leetCode/Sorting/Bubble sort.py	/^def bubblesort(arr):$/;"	f
build_heap	leetCode/Algorithms/Sorting/Heap_Sort.py	/^def build_heap(array):$/;"	f
cache	leetCode/Algorithms/Dynamic Programming/Fibonacci.py	/^cache = {}$/;"	v
cache	leetCode/Algorithms/Dynamic Programming/Memoization.py	/^cache = {}$/;"	v
cache	leetCode/DynamicProgramming/Fibonacci - DP.py	/^cache = {}$/;"	v
cache	leetCode/DynamicProgramming/Memoization.py	/^cache = {}$/;"	v
checkFunction	leetCode/array_elements_both_side_equal_balancing.py	/^def checkFunction(arr, size) : $/;"	f
checkNodes	leetCode/101_symmetric_tree_with_null_handling.py	/^    def checkNodes(self,left,right):$/;"	m	class:Solution
circ_list	leetCode/Linkedlist/Circular Linked List.py	/^circ_list = CircularLinkedList()$/;"	v
climbStairs	leetCode/70.Climbing_Stairs.py	/^    def climbStairs(self, n: int) -> int:$/;"	m	class:Solution
containsDuplicate	leetCode/217.Contains_duplicate_in_array.py	/^    def containsDuplicate(self, nums: List[int]) -> bool:$/;"	m	class:Solution
containsDuplicate	leetCode/217.Contains_duplicate_in_array.py	/^   def containsDuplicate(self, nums: List[int]) -> bool$/;"	m	class:Solution
convertThreeDigit	leetCode/273.Integers_to_english_words_translation.py	/^            def convertThreeDigit(num):$/;"	f	function:Solution.numberToWords
count	leetCode/Algorithms/Sorting/Heap_Sort.py	/^count = 0$/;"	v
count	leetCode/Algorithms/Sorting/Merge_Sort.py	/^count = 0$/;"	v
count	leetCode/Algorithms/Sorting/Quick_Sort.py	/^count = 0$/;"	v
d	leetCode/Linkedlist/Doubly Linked List.py	/^d = DoublyLinkedList()$/;"	v
delete	leetCode/Arrays/Implementing an array.py	/^  def delete(self,index):$/;"	m	class:Array
delete	leetCode/DS/Arrays/Implementation.py	/^    def delete(self,index):$/;"	m	class:my_array
delete_by_position	leetCode/DS/Linked Lists/Doubly_Linked_Lists.py	/^    def delete_by_position(self, position):$/;"	m	class:DoublyLinkedList
delete_by_position	leetCode/DS/Linked Lists/Implementation.py	/^    def delete_by_position(self, position):$/;"	m	class:LinkedList
delete_by_value	leetCode/DS/Linked Lists/Doubly_Linked_Lists.py	/^    def delete_by_value(self, data):$/;"	m	class:DoublyLinkedList
delete_by_value	leetCode/DS/Linked Lists/Implementation.py	/^    def delete_by_value(self, data):$/;"	m	class:LinkedList
dequeue	leetCode/DS/Queues/Linked_List_Implementation.py	/^    def dequeue(self):$/;"	m	class:Queue
dequeue	leetCode/DS/Queues/Queue_Using_Stacks.py	/^    def dequeue(self):$/;"	m	class:Queue
dequeue	leetCode/StackAndQueue/Queue using Linked List.py	/^  def dequeue(self):$/;"	m	class:Queue
dfs	leetCode/200.Number_of_islands.py	/^    def dfs(self, grid, r, c):$/;"	m	class:Solution
dictionary	leetCode/DS/Hash Tables/Introduction.py	/^dictionary = dict()$/;"	v
dictionary	leetCode/DS/Hash Tables/Introduction.py	/^dictionary = {'one':1, 'two':2, 'three':3, 'four':4, 'five':5}$/;"	v
dynamic_fibonacci	leetCode/Algorithms/Dynamic Programming/Fibonacci.py	/^def dynamic_fibonacci(n):$/;"	f
easy_longest_word	leetCode/DS/Arrays/Longest_Word.py	/^def easy_longest_word(string):$/;"	f
enqueue	leetCode/DS/Queues/Linked_List_Implementation.py	/^    def enqueue(self, data):$/;"	m	class:Queue
enqueue	leetCode/DS/Queues/Queue_Using_Stacks.py	/^    def enqueue(self, data):$/;"	m	class:Queue
enqueue	leetCode/StackAndQueue/Queue using Linked List.py	/^  def enqueue(self,val):$/;"	m	class:Queue
everyone	leetCode/Big-O/O(n).py	/^everyone = ['dory', 'bruce', 'marlin', 'nemo', 'gill', 'bloat', 'nigel', 'squirt', 'darla']$/;"	v
extract_max	leetCode/DS/Trees/Heap.py	/^    def extract_max(self):$/;"	m	class:MaxHeap
fact	leetCode/Recursion/Factorial.py	/^def fact(num):$/;"	f
factorial	leetCode/Recursion/Factorial.py	/^def factorial(num):$/;"	f
fib	leetCode/DynamicProgramming/Fibonacci - DP.py	/^def fib(n):$/;"	f
fib	leetCode/Recursion/Fibonacci.py	/^def fib(num):$/;"	f
fibo	leetCode/DynamicProgramming/Fibonacci - DP.py	/^def fibo(n):$/;"	f
fibonacci	leetCode/Algorithms/Dynamic Programming/Fibonacci.py	/^def fibonacci(n):$/;"	f
fibonacci	leetCode/Recursion/Fibonacci.py	/^def fibonacci(num):$/;"	f
findDisappearedNumbers	leetCode/448.Find_all_numbers_disappeared_in_array.py	/^    def findDisappearedNumbers(self, nums: List[int]) -> List[int]:$/;"	f
find_buy_sell_stock_prices	leetCode/FB_Find_maximum_single_sell_profit.py	/^def find_buy_sell_stock_prices(array):$/;"	f
find_nemo	leetCode/Big-O/O(m + n).py	/^def find_nemo(array1, array2):$/;"	f
find_nemo	leetCode/Big-O/O(n).py	/^def find_nemo(array):$/;"	f
finding_nemo	leetCode/Big-O/O(1).py	/^def finding_nemo(array):$/;"	f
firstUniqChar	leetCode/387.First_Unique_Character_in_String.py	/^    def firstUniqChar(self, s: str) -> int:$/;"	m	class:Solution
firstUniqChar	leetCode/387.First_Unique_Character_in_String.py	/^def firstUniqChar(self, s):$/;"	f
first_element	leetCode/DS/Arrays/Introduction.py	/^first_element = array[0]  #This will return the first element of the array, in this case, 5, in O(1) time$/;"	v
func	leetCode/Hashtables/First Recurring Character.py	/^def func(mylist):$/;"	f
funchallenge	leetCode/Big-O/O(n).py	/^def funchallenge(input):$/;"	f
get	leetCode/Arrays/Implementing an array.py	/^  def get(self,index):$/;"	m	class:Array
get	leetCode/DS/Arrays/Implementation.py	/^    def get(self, index):$/;"	m	class:my_array
get	leetCode/DS/Hash Tables/Implementation.py	/^    def get(self,key): #Function to return the value of the key entered by the user$/;"	m	class:hash_table
get	leetCode/Hashtables/Hash Table Implementation.py	/^	def get(self, key):$/;"	m	class:Hashtable
h	leetCode/Hashtables/Hash Table Implementation.py	/^h=Hashtable()$/;"	v
hash	leetCode/Hashtables/Hash Table Implementation.py	/^	def hash(self, key):$/;"	m	class:Hashtable
hash_table	leetCode/DS/Hash Tables/Implementation.py	/^class hash_table():$/;"	c
hashtable	leetCode/Hashtables/First Recurring Character.py	/^def hashtable(mylist):$/;"	f
heap_sort	leetCode/Algorithms/Sorting/Heap_Sort.py	/^def heap_sort(array):$/;"	f
inorder	leetCode/Traversals/Depth First Search.py	/^  def inorder(self,currnode,mylist):$/;"	m	class:BinarySearchTree
inorder_traversal	leetCode/Algorithms/Traversals/DFS.py	/^def inorder_traversal(node, DFS_list):$/;"	f
input	leetCode/FB_reverse_words_in_string.py	/^    input = 'geeks quiz practice code'$/;"	v
insert	leetCode/Algorithms/Traversals/BFS.py	/^    def insert(self, data):$/;"	m	class:BST
insert	leetCode/Algorithms/Traversals/DFS.py	/^    def insert(self, data):$/;"	m	class:BST
insert	leetCode/DS/Arrays/Implementation.py	/^    def insert(self, index, item):$/;"	m	class:my_array
insert	leetCode/DS/Linked Lists/Doubly_Linked_Lists.py	/^    def insert(self, position, data):$/;"	m	class:DoublyLinkedList
insert	leetCode/DS/Linked Lists/Implementation.py	/^    def insert(self, position, data):$/;"	m	class:LinkedList
insert	leetCode/DS/Trees/Binary_Search_Tree.py	/^    def insert(self, data):$/;"	m	class:BST
insert	leetCode/DS/Trees/Heap.py	/^    def insert(self, element):$/;"	m	class:MaxHeap
insert	leetCode/DS/Trees/Trie.py	/^    def insert(self, string):$/;"	m	class:Trie
insert	leetCode/Linkedlist/Doubly Linked List.py	/^    def insert(self,index,data):$/;"	m	class:DoublyLinkedList
insert	leetCode/Linkedlist/Linked List.py	/^  def insert(self,index,data):$/;"	m	class:LinkedList
insert	leetCode/Traversals/Breadth First Search.py	/^  def insert(self,val):$/;"	m	class:BinarySearchTree
insert	leetCode/Traversals/Depth First Search.py	/^  def insert(self,val):$/;"	m	class:BinarySearchTree
insert	leetCode/Trees/Binary Search Tree.py	/^  def insert(self,data):$/;"	m	class:BinarySearchTree
insert_edge	leetCode/DS/Graphs/Undirected_Graph_Implementation.py	/^    def insert_edge(self, vertex1, vertex2):$/;"	m	class:Graph
insert_node	leetCode/DS/Graphs/Undirected_Graph_Implementation.py	/^    def insert_node(self, data):$/;"	m	class:Graph
insertion_sort	leetCode/Algorithms/Sorting/Insertion_Sort.py	/^def insertion_sort(array):$/;"	f
insertionsort	leetCode/Sorting/Insertion sort.py	/^def insertionsort(arr):$/;"	f
intToRoman	leetCode/12.Integer_to_Roman.py	/^    def intToRoman(self, num: int) -> str:$/;"	m	class:Solution
isPalindrome	leetCode/125.valid_Palindrome.py	/^    def isPalindrome(self, s: str) -> bool:$/;"	m	class:Solution
isPalindrome	leetCode/125.valid_Palindrome_optimized_with_re.py	/^    def isPalindrome(self, s: str) -> bool:$/;"	m	class:Solution
isPalindrome	leetCode/125.valid_Palindrome_two_pointer.py	/^    def isPalindrome(self, s):$/;"	m	class:Solution
isSameTree	leetCode/100.Same_tree_recursion.py	/^    def isSameTree(self, p, q):$/;"	f
isSymmetric	leetCode/101_symmetric_tree_with_null_handling.py	/^    def isSymmetric(self, root: TreeNode) -> bool:$/;"	m	class:Solution
isSymmetric	leetCode/101_symmetric_tree_without_null_handling.py	/^    def isSymmetric(self, root: TreeNode) -> bool:$/;"	m	class:Solution
isSymmetric	leetCode/101_symmetric_tree_without_null_handling.py	/^def isSymmetric(self, root: TreeNode) -> bool:$/;"	f
isValid	leetCode/20.valid_parantheses.py	/^    def isValid(self, s):$/;"	m	class:Solution
isValid	leetCode/20.valid_parantheses_stack.py	/^    def isValid(self, s: str) -> bool:$/;"	m	class:Solution
isValid	leetCode/validate_one_type_of_paranthesis.py	/^    def isValid(self, s: str) -> bool:$/;"	m	class:Solution
is_empty	leetCode/Linkedlist/Circular Linked List.py	/^    def is_empty(self):$/;"	m	class:CircularLinkedList
is_leaf	leetCode/DS/Trees/Heap.py	/^    def is_leaf(self, pos):$/;"	m	class:MaxHeap
iterative_factorial	leetCode/Algorithms/Factorial.py	/^def iterative_factorial(number):$/;"	f
iterative_fibonacci	leetCode/Algorithms/Fibonacci.py	/^def iterative_fibonacci(index):$/;"	f
iterative_reverse	leetCode/Algorithms/Reverse_String.py	/^def iterative_reverse(string): #Here we use a second string to store the reversed version. Time and Space complexity = O(n)$/;"	f
k	leetCode/DS/Arrays/Rotate_Array.py	/^k = 11$/;"	v
kadane	leetCode/DS/Arrays/Maximum_SubArray.py	/^def kadane(array):$/;"	f
keys	leetCode/DS/Hash Tables/Implementation.py	/^    def keys(self): #Function to return all the keys$/;"	m	class:hash_table
l	leetCode/Linkedlist/Linked List.py	/^l = LinkedList()$/;"	v
large	leetCode/Big-O/O(n).py	/^large = ['nemo' for i in range(100000)]$/;"	v
large1	leetCode/Big-O/O(m + n).py	/^large1 = ['nemo' for i in range(100000)]$/;"	v
large2	leetCode/Big-O/O(m + n).py	/^large2 = ['nemo' for i in range(100000)]$/;"	v
left_child	leetCode/DS/Trees/Heap.py	/^    def left_child(self, pos):$/;"	m	class:MaxHeap
lengthOfLongestSubstring	leetCode/3.longest_subString_without_repeating_character_BruteForce.py	/^      def lengthOfLongestSubstring(self, s: str) -> int:$/;"	m	class:Solution
li	leetCode/DS/Trees/Priority_Queues_Using_Heap.py	/^li = [5, 7, 9, 1, 3]$/;"	v
li1	leetCode/DS/Trees/Priority_Queues_Using_Heap.py	/^li1 = [5, 7, 9, 4, 3]$/;"	v
li2	leetCode/DS/Trees/Priority_Queues_Using_Heap.py	/^li2 = [5, 7, 9, 4, 3]$/;"	v
list1	leetCode/DS/Arrays/Reversing_String.py	/^list1 = list(string1)$/;"	v
log_all_pairs	leetCode/Big-O/O(n^2).py	/^def log_all_pairs(array):$/;"	f
longestPalindrome	leetCode/5.Longest_palindromic_substring.py	/^def longestPalindrome(s):$/;"	f
longestPalindrome	leetCode/5.Longest_palindromic_substring_1.py	/^def longestPalindrome(s):$/;"	f
lookup	leetCode/Traversals/Breadth First Search.py	/^  def lookup(self,val):$/;"	m	class:BinarySearchTree
lookup	leetCode/Traversals/Depth First Search.py	/^  def lookup(self,val):$/;"	m	class:BinarySearchTree
lookup	leetCode/Trees/Binary Search Tree.py	/^  def lookup(self,data):$/;"	m	class:BinarySearchTree
makeFinalArray	leetCode/844.Typed_out_string_match_BackspaceStringComapre_.py	/^    def makeFinalArray(self,arr):$/;"	m	class:Solution
mat	leetCode/FB_Leftmost_column_with_atleast_one_in_row.py	/^    mat = [[0, 0, 0],$/;"	v
maxArea	leetCode/11.container_with_most_water.py	/^    def maxArea(self, height: List[int]) -> int:$/;"	m	class:Solution
maxArea	leetCode/11.container_with_most_water_Optimized.py	/^    def maxArea(self, height: List[int]) -> int:$/;"	m	class:Solution
maxProfit	leetCode/121.Best_time_to_buy_sell_stocks.py	/^    def maxProfit(self, prices):$/;"	m	class:Solution
max_heapify	leetCode/Algorithms/Sorting/Heap_Sort.py	/^def max_heapify(array, heap_size, i):$/;"	f
max_heapify	leetCode/DS/Trees/Heap.py	/^    def max_heapify(self, pos):$/;"	m	class:MaxHeap
memo	leetCode/DynamicProgramming/Memoization.py	/^memo = memoizedadd80()$/;"	v
memoized	leetCode/DynamicProgramming/Memoization.py	/^  def memoized(n):$/;"	f	function:memoizedadd80
memoized2add80	leetCode/DynamicProgramming/Memoization.py	/^def memoized2add80(n):$/;"	f
memoizedadd80	leetCode/DynamicProgramming/Memoization.py	/^def memoizedadd80():$/;"	f
memoizedadd80	leetCode/DynamicProgramming/Memoization.py	/^def memoizedadd80(n):$/;"	f
merge	leetCode/56.Merge_intervals_for_loop.py	/^    def merge(self, intervals: List[List[int]]) -> List[List[int]]:$/;"	m	class:Solution
merge	leetCode/Algorithms/Sorting/Merge_Sort.py	/^def merge(left, right):$/;"	f
merge	leetCode/DS/Arrays/Merging_sorted_arrays.py	/^def merge(array1, array2):$/;"	f
merge	leetCode/Sorting/Merge sort.py	/^def merge(left,right):$/;"	f
merge_intervals	leetCode/FB_Merge_overlapping_intervals.py	/^def merge_intervals(v):$/;"	f
merge_sort	leetCode/Algorithms/Sorting/Merge_Sort.py	/^def merge_sort(array):$/;"	f
mergesort	leetCode/Sorting/Merge sort.py	/^def mergesort(arr):$/;"	f
mergesortedarr	leetCode/Arrays/Merge Sorted Arrays.py	/^def mergesortedarr(a,b):$/;"	f
minAddToMakeValid	leetCode/100.Minimum_parentheses_to_add.py	/^    def minAddToMakeValid(self, S: str) -> int:$/;"	m	class:Solution
minRemoveToMakeValid	leetCode/100.Minimum_parentheses_to_remove.py	/^def minRemoveToMakeValid(self, s: str) -> str:$/;"	f
missingNumber	leetCode/268.Missing_number.py	/^    def missingNumber(self, nums: List[int]) -> int:$/;"	m	class:Solution
move_zeros_to_left	leetCode/FB_Move_Zero_to_left.py	/^def move_zeros_to_left(A):$/;"	f
myCache	leetCode/70.Climbing_Stairs.py	/^    myCache = {}    # A cache to store the results which are already calculated}$/;"	v	class:Solution
myGraph	leetCode/Graph/Graph Implementation.py	/^myGraph = Graph()$/;"	v
myPow	leetCode/FB_calculate_the_power.py	/^def myPow(x, n):$/;"	f
my_array	leetCode/DS/Arrays/Implementation.py	/^class my_array():$/;"	c
my_bst	leetCode/Algorithms/Traversals/BFS.py	/^my_bst = BST()$/;"	v
my_bst	leetCode/Algorithms/Traversals/DFS.py	/^my_bst = BST()$/;"	v
my_bst	leetCode/DS/Trees/Binary_Search_Tree.py	/^my_bst = BST()$/;"	v
my_graph	leetCode/DS/Graphs/Undirected_Graph_Implementation.py	/^my_graph = Graph()$/;"	v
my_heap	leetCode/DS/Trees/Heap.py	/^    my_heap = MaxHeap(15)$/;"	v	class:MaxHeap
my_linked_list	leetCode/DS/Linked Lists/Doubly_Linked_Lists.py	/^my_linked_list = DoublyLinkedList()$/;"	v
my_linked_list	leetCode/DS/Linked Lists/Implementation.py	/^    my_linked_list = LinkedList()$/;"	v	class:LinkedList
my_linked_list	leetCode/DS/Linked Lists/Reverse.py	/^my_linked_list = LinkedList()$/;"	v
my_queue	leetCode/DS/Queues/Linked_List_Implementation.py	/^my_queue = Queue()$/;"	v
my_queue	leetCode/DS/Queues/Queue_Using_Stacks.py	/^my_queue = Queue()$/;"	v
my_stack	leetCode/DS/Stacks/Array_Implementation.py	/^my_stack = Stack()$/;"	v
my_stack	leetCode/DS/Stacks/Linked_List_Implementation.py	/^my_stack = Stack()$/;"	v
my_trie	leetCode/DS/Trees/Trie.py	/^my_trie = Trie()$/;"	v
mylist	leetCode/Hashtables/First Recurring Character.py	/^mylist = [2,1,1,2,3,4,5]$/;"	v
myq	leetCode/StackAndQueue/Queue using Linked List.py	/^myq = Queue()$/;"	v
mystack	leetCode/StackAndQueue/Stacks using Arrays.py	/^mystack = Stack()$/;"	v
mystack	leetCode/StackAndQueue/Stacks using Linked List.py	/^mystack = Stack()$/;"	v
naive_frc	leetCode/DS/Hash Tables/First_Recurring_Character.py	/^def naive_frc(array):$/;"	f
naive_longest_word	leetCode/DS/Arrays/Longest_Word.py	/^def naive_longest_word(string):$/;"	f
naive_pattern_matching	leetCode/DS/Hash Tables/Pattern_Matching.py	/^def naive_pattern_matching(string, pattern):$/;"	f
naive_rotation	leetCode/DS/Arrays/Rotate_Array.py	/^def naive_rotation(array, k):$/;"	f
naive_zero_mover	leetCode/DS/Arrays/Move_Zeroes.py	/^def naive_zero_mover(array):$/;"	f
nemo	leetCode/Big-O/O(n).py	/^nemo = ['nemo']$/;"	v
new_array	leetCode/Big-O/O(n^2).py	/^new_array = [1,2,3,4,5]$/;"	v
new_hash	leetCode/DS/Hash Tables/Implementation.py	/^new_hash = hash_table(2)$/;"	v
numIslands	leetCode/200.Number_of_islands.py	/^    def numIslands(self, grid):$/;"	m	class:Solution
numberToWords	leetCode/273.Integers_to_english_words_translation.py	/^    def numberToWords(self, num: int) -> str:$/;"	m	class:Solution
numbers	leetCode/Sorting/Quick sort.py	/^numbers = [99, 44, 6, 2, 1, 5, 63, 87, 283, 4, 0]$/;"	v
one_liner_move	leetCode/DS/Arrays/Move_Zeroes.py	/^def one_liner_move(array):$/;"	f
optimized_bubble_sort	leetCode/Algorithms/Sorting/Bubble_Sort.py	/^def optimized_bubble_sort(array):$/;"	f
pairs	leetCode/Big-O/O(m x n).py	/^def pairs(array1, array2):$/;"	f
parent	leetCode/DS/Trees/Heap.py	/^    def parent(self, pos):$/;"	m	class:MaxHeap
partition	leetCode/Algorithms/Sorting/Quick_Sort.py	/^def partition(array, left, right):$/;"	f
partition	leetCode/Sorting/Quick sort.py	/^def partition(array, pivot, left, right):$/;"	f
pattern	leetCode/DS/Hash Tables/Pattern_Matching.py	/^pattern = "AABA"$/;"	v
peek	leetCode/DS/Queues/Linked_List_Implementation.py	/^    def peek(self):$/;"	m	class:Queue
peek	leetCode/DS/Queues/Queue_Using_Stacks.py	/^    def peek(self):$/;"	m	class:Queue
peek	leetCode/DS/Stacks/Array_Implementation.py	/^    def peek(self):$/;"	m	class:Stack
peek	leetCode/DS/Stacks/Linked_List_Implementation.py	/^    def peek(self):$/;"	m	class:Stack
peek	leetCode/StackAndQueue/Queue using Linked List.py	/^  def peek(self):$/;"	m	class:Queue
peek	leetCode/StackAndQueue/Stacks using Arrays.py	/^  def peek(self):$/;"	m	class:Stack
peek	leetCode/StackAndQueue/Stacks using Linked List.py	/^  def peek(self):$/;"	m	class:Stack
player_attack	introspection.py	/^def player_attack(character):$/;"	f
player_attack	oop.py	/^def player_attack(character):$/;"	f
player_attack	super.py	/^def player_attack(character):$/;"	f
pop	leetCode/Arrays/Implementing an array.py	/^  def pop(self):$/;"	m	class:Array
pop	leetCode/DS/Arrays/Implementation.py	/^    def pop(self):$/;"	m	class:my_array
pop	leetCode/DS/Stacks/Array_Implementation.py	/^    def pop(self):$/;"	m	class:Stack
pop	leetCode/DS/Stacks/Linked_List_Implementation.py	/^    def pop(self):$/;"	m	class:Stack
pop	leetCode/StackAndQueue/Stacks using Arrays.py	/^  def pop(self):$/;"	m	class:Stack
pop	leetCode/StackAndQueue/Stacks using Linked List.py	/^  def pop(self):$/;"	m	class:Stack
postorder	leetCode/Traversals/Depth First Search.py	/^  def postorder(self,currnode,mylist):$/;"	m	class:BinarySearchTree
postorder_traversal	leetCode/Algorithms/Traversals/DFS.py	/^def postorder_traversal(node, DFS_list):$/;"	f
preorder	leetCode/Traversals/Depth First Search.py	/^  def preorder(self,currnode,mylist):$/;"	m	class:BinarySearchTree
preorder_traversal	leetCode/Algorithms/Traversals/DFS.py	/^def preorder_traversal(node,DFS_list):$/;"	f
prepend	leetCode/DS/Linked Lists/Doubly_Linked_Lists.py	/^    def prepend(self, data):$/;"	m	class:DoublyLinkedList
prepend	leetCode/DS/Linked Lists/Implementation.py	/^    def prepend(self, data):$/;"	m	class:LinkedList
prepend	leetCode/Linkedlist/Doubly Linked List.py	/^    def prepend(self,data):$/;"	m	class:DoublyLinkedList
prepend	leetCode/Linkedlist/Linked List.py	/^  def prepend(self,data):$/;"	m	class:LinkedList
print_heap	leetCode/DS/Trees/Heap.py	/^    def print_heap(self):$/;"	m	class:MaxHeap
print_list	leetCode/DS/Linked Lists/Doubly_Linked_Lists.py	/^    def print_list(self):$/;"	m	class:DoublyLinkedList
print_list	leetCode/DS/Linked Lists/Implementation.py	/^    def print_list(self):$/;"	m	class:LinkedList
print_list	leetCode/Linkedlist/Circular Linked List.py	/^    def print_list(self):$/;"	m	class:CircularLinkedList
print_numbers_then_pairs	leetCode/Big-O/O(n^2).py	/^def print_numbers_then_pairs(array):$/;"	f
print_queue	leetCode/DS/Queues/Linked_List_Implementation.py	/^    def print_queue(self):$/;"	m	class:Queue
print_queue	leetCode/DS/Queues/Queue_Using_Stacks.py	/^    def print_queue(self):$/;"	m	class:Queue
print_stack	leetCode/DS/Stacks/Array_Implementation.py	/^    def print_stack(self):$/;"	m	class:Stack
print_stack	leetCode/DS/Stacks/Linked_List_Implementation.py	/^    def print_stack(self):$/;"	m	class:Stack
print_tree	leetCode/Trees/Binary Search Tree.py	/^  def print_tree(self):$/;"	m	class:BinarySearchTree
printl	leetCode/Linkedlist/Linked List.py	/^  def printl(self):$/;"	m	class:LinkedList
printt	leetCode/Linkedlist/Doubly Linked List.py	/^    def printt(self):$/;"	m	class:DoublyLinkedList
printt	leetCode/StackAndQueue/Queue using Linked List.py	/^  def printt(self):$/;"	m	class:Queue
printt	leetCode/StackAndQueue/Stacks using Linked List.py	/^  def printt(self):$/;"	m	class:Stack
printt	leetCode/Trees/Binary Search Tree.py	/^  def printt(self,curr_node):$/;"	m	class:BinarySearchTree
productExceptSelf	leetCode/238.Product_of_array_except_itself.py	/^    def productExceptSelf(self, nums: List[int]) -> List[int]:$/;"	m	class:Solution
push	leetCode/Arrays/Implementing an array.py	/^  def push(self,item):$/;"	m	class:Array
push	leetCode/DS/Arrays/Implementation.py	/^    def push(self, item):$/;"	m	class:my_array
push	leetCode/DS/Stacks/Array_Implementation.py	/^    def push(self, data):$/;"	m	class:Stack
push	leetCode/DS/Stacks/Linked_List_Implementation.py	/^    def push(self, data):$/;"	m	class:Stack
push	leetCode/StackAndQueue/Stacks using Arrays.py	/^  def push(self,value):$/;"	m	class:Stack
push	leetCode/StackAndQueue/Stacks using Linked List.py	/^  def push(self,data):$/;"	m	class:Stack
put	leetCode/Hashtables/Hash Table Implementation.py	/^	def put(self, key, value):$/;"	m	class:Hashtable
quick_sort	leetCode/Algorithms/Sorting/Quick_Sort.py	/^def quick_sort(array, left, right):$/;"	f
quicksort	leetCode/Sorting/Quick sort.py	/^def quicksort(array,left,right):$/;"	f
qw	leetCode/StackAndQueue/Stacks using Linked List.py	/^qw = mystack.peek()$/;"	v
rabin_karp	leetCode/DS/Hash Tables/Pattern_Matching.py	/^def rabin_karp(string, pattern, prime):$/;"	f
recursive_factorial	leetCode/Algorithms/Factorial.py	/^def recursive_factorial(number):$/;"	f
recursive_fibonacci	leetCode/Algorithms/Fibonacci.py	/^def recursive_fibonacci(index):$/;"	f
recursive_reverse	leetCode/Algorithms/Reverse_String.py	/^def recursive_reverse(string):$/;"	f
recursivebfs	leetCode/Traversals/Breadth First Search.py	/^  def recursivebfs(self,queue,mylist):$/;"	m	class:BinarySearchTree
regex	leetCode/DS/Arrays/Longest_Word.py	/^def regex(string):$/;"	f
remove	leetCode/Algorithms/Traversals/BFS.py	/^    def remove(self, data):$/;"	m	class:BST
remove	leetCode/Algorithms/Traversals/DFS.py	/^    def remove(self, data):$/;"	m	class:BST
remove	leetCode/DS/Trees/Binary_Search_Tree.py	/^    def remove(self, data):$/;"	m	class:BST
remove	leetCode/Hashtables/Hash Table Implementation.py	/^	def remove(self, key):$/;"	m	class:Hashtable
remove	leetCode/Linkedlist/Doubly Linked List.py	/^    def remove(self,index):$/;"	m	class:DoublyLinkedList
remove	leetCode/Linkedlist/Linked List.py	/^  def remove(self,index):$/;"	m	class:LinkedList
remove_first	leetCode/Linkedlist/Circular Linked List.py	/^    def remove_first(self):$/;"	m	class:CircularLinkedList
remove_last	leetCode/Linkedlist/Circular Linked List.py	/^    def remove_last(self):$/;"	m	class:CircularLinkedList
remove_particular	leetCode/Linkedlist/Circular Linked List.py	/^    def remove_particular(self, position):$/;"	m	class:CircularLinkedList
result	leetCode/FB_Find_maximum_single_sell_profit.py	/^result = find_buy_sell_stock_prices(array)$/;"	v
result	leetCode/FB_Merge_overlapping_intervals.py	/^result = merge_intervals(v)$/;"	v
rev_sentence	leetCode/FB_reverse_words_in_string.py	/^def rev_sentence(sentence): $/;"	f
reverse	leetCode/7.reverseInteger.py	/^    def reverse(self, x: int) -> int:$/;"	m	class:Solution
reverse	leetCode/Arrays/Reversing a string.py	/^def reverse(stri):$/;"	f
reverse	leetCode/DS/Arrays/Rotate_Array.py	/^def reverse(array, start, end): #Function to reverse the elements of array from index start to index end$/;"	f
reverse	leetCode/DS/Linked Lists/Reverse.py	/^def reverse(linked_list):$/;"	f
reverse	leetCode/Linkedlist/Linked List.py	/^  def reverse(self):$/;"	m	class:LinkedList
reverse	leetCode/Recursion/Reversing a string using Recursion.py	/^def reverse(word):$/;"	f
reverseList	leetCode/206.Reverse_linked_list.iterative.py	/^    def reverseList(self, head: ListNode) -> ListNode:$/;"	m	class:Solution
reverseList	leetCode/206.Reverse_linked_list.recursive.py	/^    def reverseList(self, head: ListNode) -> ListNode:$/;"	m	class:Solution
reverse_a_string_slowly	leetCode/FB_reverse_string_Hi_Sanju_to_ujnas_iH.py	/^def reverse_a_string_slowly(a_string):$/;"	f
reverse_rotate	leetCode/DS/Arrays/Rotate_Array.py	/^def reverse_rotate(array, k):$/;"	f
reverse_sorted_array	leetCode/Algorithms/Sorting/Heap_Sort.py	/^reverse_sorted_array = [9,8,7,6,5,4,3,2,1,0,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10]$/;"	v
reverse_sorted_array	leetCode/Algorithms/Sorting/Insertion_Sort.py	/^reverse_sorted_array = [9,8,7,6,5,4,3,2,1,0,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10]$/;"	v
reverse_sorted_array	leetCode/Algorithms/Sorting/Merge_Sort.py	/^reverse_sorted_array = [9,8,7,6,5,4,3,2,1,0,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10]$/;"	v
reverse_sorted_array	leetCode/Algorithms/Sorting/Quick_Sort.py	/^reverse_sorted_array = [9,8,7,6,5,4,3,2,1,0,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10]$/;"	v
reverse_sorted_array	leetCode/Algorithms/Sorting/Selection_Sort.py	/^reverse_sorted_array = [9,8,7,6,5,4,3,2,1,0,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10]$/;"	v
reversed_linked_list	leetCode/DS/Linked Lists/Reverse.py	/^reversed_linked_list = reverse(my_linked_list)$/;"	v
right_child	leetCode/DS/Trees/Heap.py	/^    def right_child(self, pos):$/;"	m	class:MaxHeap
rob	leetCode/House_robber_using_DP.py	/^     def rob(self, nums):$/;"	m	class:Solution
rob	leetCode/House_robber_using_odd-even.py	/^     def rob(self, nums):$/;"	m	class:Solution
rob	leetCode/House_robber_using_odd-even.py	/^def rob(self, nums):$/;"	f
rotate	leetCode/788.rotated_digits_using_simple.py	/^def rotate(self, n):$/;"	f
rotatedDigits	leetCode/788.rotated_digits_using_hash_map.py	/^    def rotatedDigits(self, N: int) -> int:$/;"	m	class:Solution
rotatedDigits	leetCode/788.rotated_digits_using_simple.py	/^def rotatedDigits(self, N):$/;"	f
search	leetCode/Algorithms/Traversals/BFS.py	/^    def search(self,data):$/;"	m	class:BST
search	leetCode/Algorithms/Traversals/DFS.py	/^    def search(self,data):$/;"	m	class:BST
search	leetCode/DS/Trees/Binary_Search_Tree.py	/^    def search(self,data):$/;"	m	class:BST
search	leetCode/DS/Trees/Trie.py	/^    def search(self, string):$/;"	m	class:Trie
search	leetCode/FB_Leftmost_column_with_atleast_one_in_row.py	/^def search(mat, n, m):$/;"	f
second_iterative_reverse	leetCode/Algorithms/Reverse_String.py	/^def second_iterative_reverse(string):$/;"	f
selection_sort	leetCode/Algorithms/Sorting/Selection_Sort.py	/^def selection_sort(array):$/;"	f
selectionsort	leetCode/Sorting/Selection sort.py	/^def selectionsort(arr):$/;"	f
set	leetCode/DS/Hash Tables/Implementation.py	/^    def set(self, key, value): #Function to insert a new key, value pair$/;"	m	class:hash_table
show_connections	leetCode/DS/Graphs/Undirected_Graph_Implementation.py	/^    def show_connections(self):$/;"	m	class:Graph
showconnection	leetCode/Graph/Graph Implementation.py	/^  def showconnection(self):$/;"	m	class:Graph
sign_in	dunder.py	/^    def sign_in(self):$/;"	m	class:User
sign_in	introspection.py	/^    def sign_in(self):$/;"	m	class:User
sign_in	oop.py	/^    def sign_in(self):$/;"	m	class:User
sign_in	super.py	/^    def sign_in(self):$/;"	m	class:User
simple_frc	leetCode/DS/Hash Tables/First_Recurring_Character.py	/^def simple_frc(array):$/;"	f
simple_reverse	leetCode/DS/Arrays/Reversing_String.py	/^def simple_reverse(string):$/;"	f
singleNumber	leetCode/136.Single_number_missing.py	/^    def singleNumber(self, nums: List[int]) -> int:$/;"	m	class:Solution
sixth_element	leetCode/DS/Arrays/Introduction.py	/^sixth_element = array[5]  #sixth-element = 43 Again, in O(1) time$/;"	v
size	leetCode/array_find_matching.py	/^size=len(array_in)$/;"	v
slightly_better_pair_sum	leetCode/GoogleInterviewQuestion.py	/^def slightly_better_pair_sum(array, sum):$/;"	f
smart_duplicate_search	leetCode/DS/Arrays/Contains_Duplicate.py	/^def smart_duplicate_search(array):$/;"	f
smart_pair_sum	leetCode/GoogleInterviewQuestion.py	/^def smart_pair_sum(array, sum):$/;"	f
smarter_matching	leetCode/Find_matching_elements_in_array.py	/^def smarter_matching(array1, array2):$/;"	f
smarter_matching2	leetCode/Find_matching_elements_in_array.py	/^def smarter_matching2(array1, array2):$/;"	f
smarter_reverse	leetCode/DS/Arrays/Reversing_String.py	/^def smarter_reverse(string):$/;"	f
smartest_pair_sum	leetCode/GoogleInterviewQuestion.py	/^def smartest_pair_sum(array, sum):$/;"	f
sort_pair_sum	leetCode/GoogleInterviewQuestion.py	/^def sort_pair_sum(array, sum):$/;"	f
sorted_array	leetCode/Algorithms/Sorting/Bubble_Sort.py	/^sorted_array = [5,6,7,8,9]$/;"	v
sorted_array	leetCode/Algorithms/Sorting/Heap_Sort.py	/^sorted_array = [5,6,7,8,9]$/;"	v
sorted_array	leetCode/Algorithms/Sorting/Insertion_Sort.py	/^sorted_array = [5,6,7,8,9]$/;"	v
sorted_array	leetCode/Algorithms/Sorting/Merge_Sort.py	/^sorted_array = [5,6,7,8,9]$/;"	v
sorted_array	leetCode/Algorithms/Sorting/Quick_Sort.py	/^sorted_array = [5,6,7,8,9]$/;"	v
sorted_array	leetCode/Algorithms/Sorting/Selection_Sort.py	/^sorted_array = [5,6,7,8,9]$/;"	v
sorted_array1	leetCode/Algorithms/Sorting/Bubble_Sort.py	/^sorted_array1 = [5,6,7,8,9]$/;"	v
squaring	leetCode/Algorithms/Dynamic Programming/Memoization.py	/^def squaring(number):$/;"	f
squaring_with_memoization	leetCode/Algorithms/Dynamic Programming/Memoization.py	/^def squaring_with_memoization(number):$/;"	f
squaring_without_memoization	leetCode/Algorithms/Dynamic Programming/Memoization.py	/^def squaring_without_memoization(number): #Function to calculate the suare of a number$/;"	f
sss	leetCode/DS/Arrays/Longest_Word.py	/^sss = "Hello there how are you"$/;"	v
stack	leetCode/100.Minimum_parentheses_to_add.py	/^        stack =[]$/;"	v	class:Solution
string	leetCode/DS/Arrays/Longest_Word.py	/^string = 'fun!@#$# times'$/;"	v
string	leetCode/DS/Arrays/Reversing_String.py	/^string = "Hello"$/;"	v
string	leetCode/DS/Hash Tables/Pattern_Matching.py	/^string = "AABAACAADAABAABA"$/;"	v
string	leetCode/FB_reverse_string_Hi_Sanju_to_ujnas_iH.py	/^string="Hi sanju"$/;"	v
string1	leetCode/DS/Arrays/Reversing_String.py	/^string1 = 'abcde'$/;"	v
string2	leetCode/DS/Arrays/Reversing_String.py	/^string2 = reversed(string1)$/;"	v
strings	leetCode/Arrays/Arrays.py	/^strings = ['a','b','c','d']$/;"	v
subFunction	leetCode/101_symmetric_tree_without_null_handling.py	/^    def subFunction(self,lf, rt):$/;"	m	class:Solution
subFunction	leetCode/101_symmetric_tree_without_null_handling.py	/^def subFunction(lf, rt):$/;"	f
subarraySum	leetCode/560.subarray_sum_equals_K.py	/^    def subarraySum(self, nums: List[int], k: int) -> int:$/;"	m	class:Solution
sum	leetCode/GoogleInterviewQuestion.py	/^sum = 3$/;"	v
super_list1	ex_extending_list.py	/^super_list1=SuperList();$/;"	v
swap	leetCode/DS/Arrays/Reversing_String.py	/^def swap(string, a, b): #Function which swaps two characters of a string$/;"	f
swap	leetCode/DS/Trees/Heap.py	/^    def swap(self, fpos, spos):$/;"	m	class:MaxHeap
swap	leetCode/Sorting/Quick sort.py	/^def swap(array, firstindex, secondindex):$/;"	f
swap_move	leetCode/DS/Arrays/Move_Zeroes.py	/^def swap_move(array):$/;"	f
t1	leetCode/Algorithms/Dynamic Programming/Fibonacci.py	/^t1 = time.time()$/;"	v
t1	leetCode/Algorithms/Dynamic Programming/Memoization.py	/^t1 = time.time()$/;"	v
t2	leetCode/Algorithms/Dynamic Programming/Fibonacci.py	/^t2 = time.time()$/;"	v
t2	leetCode/Algorithms/Dynamic Programming/Memoization.py	/^t2 = time.time()$/;"	v
times	leetCode/Algorithms/Dynamic Programming/Memoization.py	/^times =[]$/;"	v
total	leetCode/array_find_matching.py	/^total = 16$/;"	v
trap	leetCode/42.Trapping_rain_water.py	/^    def trap(self, height: List[int]) -> int:$/;"	m	class:Solution
trap	leetCode/42.Trapping_rain_water_BruteForce.py	/^    def trap(self, height: List[int]) -> int:$/;"	m	class:Solution
traversetoindex	leetCode/Linkedlist/Doubly Linked List.py	/^    def traversetoindex(self,index):$/;"	m	class:DoublyLinkedList
tree	leetCode/Traversals/Breadth First Search.py	/^tree = BinarySearchTree()$/;"	v
tree	leetCode/Traversals/Depth First Search.py	/^tree = BinarySearchTree()$/;"	v
twoSum	leetCode/find_elements_from_array_equals_to_sum.py	/^    def twoSum(self, nums: List[int], target: int) -> List[int]:$/;"	m	class:Solution
v	leetCode/FB_Merge_overlapping_intervals.py	/^v = [Pair(1, 5), Pair(3, 1), Pair(4, 6), $/;"	v
v	leetCode/FB_Move_Zero_to_left.py	/^v = [1, 10, 20, 0, 59, 63, 0, 88, 0]$/;"	v
v1	leetCode/FB_search_rotated_array.py	/^v1 = [6, 7, 1, 2, 3, 4, 5];$/;"	v
v2	leetCode/FB_search_rotated_array.py	/^v2 = [4, 5, 6, 1, 2, 3];$/;"	v
values	leetCode/DS/Hash Tables/Implementation.py	/^    def values(self): #Function to return all the values, with exactly the same logic as the keys function$/;"	m	class:hash_table
wizard1	dunder.py	/^wizard1=Wizard('WizardName', 60, 'itsmesanju@gmail.com')$/;"	v
wizard1	introspection.py	/^wizard1=Wizard('WizardName', 60, 'itsmesanju@gmail.com')$/;"	v
wizard1	oop.py	/^wizard1=Wizard('WizardName', 60)$/;"	v
wizard1	super.py	/^wizard1=Wizard('WizardName', 60, 'itsmesanju@gmail.com')$/;"	v
wizard2	oop.py	/^wizard2=Wizard('Wizard2', 60)$/;"	v
wordBreak	leetCode/139.Word_break.py	/^    def wordBreak(self, s, wordDict):$/;"	m	class:Solution
x	leetCode/Arrays/Merge Sorted Arrays.py	/^x=mergesortedarr(a,b)$/;"	v
x	leetCode/Arrays/Reversing a string.py	/^x=reverse('I am theja')$/;"	v
x	leetCode/DynamicProgramming/Fibonacci - DP.py	/^x = fibo(8)$/;"	v
x	leetCode/Hashtables/First Recurring Character.py	/^x = hashtable(mylist)$/;"	v
x	leetCode/Sorting/Merge sort.py	/^x = mergesort(arr)$/;"	v
x	leetCode/StackAndQueue/Queue using Linked List.py	/^x = myq.peek()$/;"	v
x	leetCode/StackAndQueue/Stacks using Arrays.py	/^x = mystack.peek()$/;"	v
x	leetCode/StackAndQueue/Stacks using Linked List.py	/^x = mystack.peek()$/;"	v
x	leetCode/Traversals/Breadth First Search.py	/^x = tree.lookup(170)$/;"	v
x	leetCode/Trees/Binary Search Tree.py	/^x = bst.lookup(6)$/;"	v
x	leetCode/Trees/Heapq in python.py	/^x = [5,2,8,1,6,7,4,9]$/;"	v
y	leetCode/StackAndQueue/Stacks using Linked List.py	/^y=mystack.pop()$/;"	v
y	leetCode/Trees/Binary Search Tree.py	/^y = bst.lookup(99)$/;"	v
